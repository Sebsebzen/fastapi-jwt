{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fastapi-jwt FastAPI extension for JWT auth","title":"Home"},{"location":"#fastapi-jwt","text":"FastAPI extension for JWT auth","title":"fastapi-jwt"},{"location":"faq/","text":"FAQ","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"release-notes/","text":"","title":"Release notes"},{"location":"developing/backend/","text":"Backend development Linting and Testing It is important NOT ONLY to get OK from all linters (or achieve score in the case of pylint), but also to write good code. P.S. It's hard to say what a Good Code is. Let's say that it should be simple, clear, commented, and so on. python -m flake8 . python -m mypy fastapi_jwt python -m pylint fastapi_jwt # fails under score 7 python -m isort . --check Try NOT ONLY to achieve 100% coverage, but also to cover extreme cases, height load cases, multithreaded cases, incorrect input, and so on. python -m pytest Fixing some issues You can fix some issues in auto mode. Sorting imports and make autopep. python -m isort .","title":"Backend development"},{"location":"developing/backend/#backend-development","text":"","title":"Backend development"},{"location":"developing/backend/#linting-and-testing","text":"It is important NOT ONLY to get OK from all linters (or achieve score in the case of pylint), but also to write good code. P.S. It's hard to say what a Good Code is. Let's say that it should be simple, clear, commented, and so on. python -m flake8 . python -m mypy fastapi_jwt python -m pylint fastapi_jwt # fails under score 7 python -m isort . --check Try NOT ONLY to achieve 100% coverage, but also to cover extreme cases, height load cases, multithreaded cases, incorrect input, and so on. python -m pytest","title":"Linting and Testing"},{"location":"developing/backend/#fixing-some-issues","text":"You can fix some issues in auto mode. Sorting imports and make autopep. python -m isort .","title":"Fixing some issues"},{"location":"developing/docs/","text":"Docs development Install dev dependencies python setup.py install .[docs] # \\[docs\\] in zsh Editing mkdocs can be run as dev server with auto-reload. mkdocs serve --config-file docs/mkdocs.yml Note: Server will auto-restart for all changed docs/* files. If you want to edit README.md or CONTRIBUTING.md you should restart server on each change. Building Add python backend docs TODO lazydocs \\ --output-path=\"./docs/references/backend\" \\ --overview-file=\"index.md\" \\ --src-base-url=\"https://github.com/k4black/flowingo/blob/master\" \\ flowingo Deploy Without versioning (now) Build and deploy docs itself mkdocs build --config-file docs/mkdocs.yml mkdocs serve --config-file docs/mkdocs.yml mkdocs gh-deploy --config-file docs/mkdocs.yml With mike as versioning tool ( TODO ) Deploy with mike to github-pages with versioning support mike deploy --config-file docs/mkdocs.yml 0.0.1 latest --push mike alias --config-file docs/mkdocs.yml 0.0.1 0.0.x --push mike set-default --config-file docs/mkdocs.yml latest --push With read-the-docs as versioning tool ( TODO ) Deploy with mkdocs to read-the-docs for versioning support TODO","title":"Docs development"},{"location":"developing/docs/#docs-development","text":"Install dev dependencies python setup.py install .[docs] # \\[docs\\] in zsh","title":"Docs development"},{"location":"developing/docs/#editing","text":"mkdocs can be run as dev server with auto-reload. mkdocs serve --config-file docs/mkdocs.yml Note: Server will auto-restart for all changed docs/* files. If you want to edit README.md or CONTRIBUTING.md you should restart server on each change.","title":"Editing"},{"location":"developing/docs/#building","text":"Add python backend docs TODO lazydocs \\ --output-path=\"./docs/references/backend\" \\ --overview-file=\"index.md\" \\ --src-base-url=\"https://github.com/k4black/flowingo/blob/master\" \\ flowingo","title":"Building"},{"location":"developing/docs/#deploy","text":"","title":"Deploy"},{"location":"developing/docs/#without-versioning-now","text":"Build and deploy docs itself mkdocs build --config-file docs/mkdocs.yml mkdocs serve --config-file docs/mkdocs.yml mkdocs gh-deploy --config-file docs/mkdocs.yml","title":"Without versioning (now)"},{"location":"developing/docs/#with-mike-as-versioning-tool-todo","text":"Deploy with mike to github-pages with versioning support mike deploy --config-file docs/mkdocs.yml 0.0.1 latest --push mike alias --config-file docs/mkdocs.yml 0.0.1 0.0.x --push mike set-default --config-file docs/mkdocs.yml latest --push","title":"With mike as versioning tool (TODO)"},{"location":"developing/docs/#with-read-the-docs-as-versioning-tool-todo","text":"Deploy with mkdocs to read-the-docs for versioning support TODO","title":"With read-the-docs as versioning tool (TODO)"},{"location":"developing/release/","text":"Build and Release Auto [recommended] Alternatively github action Bump version can be used. It creates new git tag on the master branch with specified version. Then, the following list of action will be performed * Bump version : update VERSION file and set git tag * Publish : github release, docs build and release, pypi pkg build and release, docker release By hands Python package Egg (deprecated) python3 setup.py build python3 setup.py sdist twine upload -r testpypi dist/* twine upload dist/* Build Wheel and see what inside python3 -m pip wheel . --no-deps --wheel-dir dist tar --list -f dist/fastapi-jwt-0.0.1-py3-none-any.whl Load dist to pypi twine upload -r testpypi dist/* twine upload dist/* Docs @see docs for docs","title":"Build and Release"},{"location":"developing/release/#build-and-release","text":"","title":"Build and Release"},{"location":"developing/release/#auto-recommended","text":"Alternatively github action Bump version can be used. It creates new git tag on the master branch with specified version. Then, the following list of action will be performed * Bump version : update VERSION file and set git tag * Publish : github release, docs build and release, pypi pkg build and release, docker release","title":"Auto [recommended]"},{"location":"developing/release/#by-hands","text":"","title":"By hands"},{"location":"developing/release/#python-package","text":"Egg (deprecated) python3 setup.py build python3 setup.py sdist twine upload -r testpypi dist/* twine upload dist/* Build Wheel and see what inside python3 -m pip wheel . --no-deps --wheel-dir dist tar --list -f dist/fastapi-jwt-0.0.1-py3-none-any.whl Load dist to pypi twine upload -r testpypi dist/* twine upload dist/*","title":"Python package"},{"location":"developing/release/#docs","text":"@see docs for docs","title":"Docs"},{"location":"user_guide/usage/","text":"Usage Python pip install flowingo flowingo --help TODO Docker docker pull k4black/flowingo docker run --entrypoint='flowingo --help' k4black/flowingo TODO Docker-compose","title":"Usage"},{"location":"user_guide/usage/#usage","text":"","title":"Usage"},{"location":"user_guide/usage/#python","text":"pip install flowingo flowingo --help TODO","title":"Python"},{"location":"user_guide/usage/#docker","text":"docker pull k4black/flowingo docker run --entrypoint='flowingo --help' k4black/flowingo TODO","title":"Docker"},{"location":"user_guide/usage/#docker-compose","text":"","title":"Docker-compose"}]}