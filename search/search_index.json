{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"fastapi-jwt FastAPI native extension, easy and simple JWT auth Documentation: https://k4black.github.io/fastapi-jwt/ Source Code: https://github.com/k4black/fastapi-jwt/ Installation pip install fastapi-jwt Usage This library made in fastapi style, so it can be used as standard security features from fastapi import FastAPI, Security from fastapi_jwt import JwtAuthorizationCredentials, JwtAccessBearer app = FastAPI() access_security = JwtAccessBearer(secret_key=\"secret_key\", auto_error=True) @app.post(\"/auth\") def auth(): subject = {\"username\": \"username\", \"role\": \"user\"} return {\"access_token\": access_security.create_access_token(subject=subject)} @app.get(\"/users/me\") def read_current_user( credentials: JwtAuthorizationCredentials = Security(access_security), ): return {\"username\": credentials[\"username\"], \"role\": credentials[\"role\"]} For more examples see usage docs Alternatives FastAPI docs suggest writing it manually , but code duplication opportunity for bugs There is nice fastapi-jwt-auth , but poorly supported not \"FastAPI-style\" (not native functions parameters) FastAPI Integration There it is open and maintained Pull Request #3305 to the fastapi repo. Currently, not considered. Requirements fastapi python-jose[cryptography]","title":"Home"},{"location":"#fastapi-jwt","text":"FastAPI native extension, easy and simple JWT auth Documentation: https://k4black.github.io/fastapi-jwt/ Source Code: https://github.com/k4black/fastapi-jwt/","title":"fastapi-jwt"},{"location":"#installation","text":"pip install fastapi-jwt","title":"Installation"},{"location":"#usage","text":"This library made in fastapi style, so it can be used as standard security features from fastapi import FastAPI, Security from fastapi_jwt import JwtAuthorizationCredentials, JwtAccessBearer app = FastAPI() access_security = JwtAccessBearer(secret_key=\"secret_key\", auto_error=True) @app.post(\"/auth\") def auth(): subject = {\"username\": \"username\", \"role\": \"user\"} return {\"access_token\": access_security.create_access_token(subject=subject)} @app.get(\"/users/me\") def read_current_user( credentials: JwtAuthorizationCredentials = Security(access_security), ): return {\"username\": credentials[\"username\"], \"role\": credentials[\"role\"]} For more examples see usage docs","title":"Usage"},{"location":"#alternatives","text":"FastAPI docs suggest writing it manually , but code duplication opportunity for bugs There is nice fastapi-jwt-auth , but poorly supported not \"FastAPI-style\" (not native functions parameters)","title":"Alternatives"},{"location":"#fastapi-integration","text":"There it is open and maintained Pull Request #3305 to the fastapi repo. Currently, not considered.","title":"FastAPI Integration"},{"location":"#requirements","text":"fastapi python-jose[cryptography]","title":"Requirements"},{"location":"developing/","text":"Developing Install dev dependencies python -m pip install .[docs] # \\[docs\\] in zsh Python package Linting and Testing It is important NOT ONLY to get OK from all linters (or achieve score in the case of pylint), but also to write good code. P.S. It's hard to say what a Good Code is. Let's say that it should be simple, clear, commented, and so on. python -m flake8 . python -m mypy fastapi_jwt python -m pylint fastapi_jwt # fails under score 7 python -m isort . --check Try NOT ONLY to achieve 100% coverage, but also to cover extreme cases, height load cases, multithreaded cases, incorrect input, and so on. python -m pytest You can fix some issues in auto mode. Sorting imports and make autopep. shell python -m isort . Publishing Egg (deprecated) python3 setup.py build python3 setup.py sdist twine upload -r testpypi dist/* twine upload dist/* Build Wheel and see what inside python3 -m pip wheel . --no-deps --wheel-dir dist tar --list -f dist/fastapi-jwt-0.0.1-py3-none-any.whl Load dist to pypi twine upload -r testpypi dist/* twine upload dist/* Docs Editing Edit it in docs/ mkdocs can be run as dev server with auto-reload. mkdocs serve --config-file docs/mkdocs.yml Note: Server will auto-restart for all changed docs/* files. If you want to edit README.md or CONTRIBUTING.md you should restart server on each change. Building ( TODO ) Add python backend docs TODO lazydocs \\ --output-path=\"./docs/references/backend\" \\ --overview-file=\"index.md\" \\ --src-base-url=\"https://github.com/k4black/flowingo/blob/master\" \\ flowingo Deploy Without versioning (now) Build and deploy docs itself mkdocs build --config-file docs/mkdocs.yml mkdocs gh-deploy --config-file docs/mkdocs.yml With mike as versioning tool ( TODO ) Deploy with mike to github-pages with versioning support mike deploy --config-file docs/mkdocs.yml 0.0.1 latest --push mike alias --config-file docs/mkdocs.yml 0.0.1 0.0.x --push mike set-default --config-file docs/mkdocs.yml latest --push With read-the-docs as versioning tool ( TODO ) Deploy with mkdocs to read-the-docs for versioning support TODO","title":"Developing"},{"location":"developing/#developing","text":"Install dev dependencies python -m pip install .[docs] # \\[docs\\] in zsh","title":"Developing"},{"location":"developing/#python-package","text":"","title":"Python package"},{"location":"developing/#linting-and-testing","text":"It is important NOT ONLY to get OK from all linters (or achieve score in the case of pylint), but also to write good code. P.S. It's hard to say what a Good Code is. Let's say that it should be simple, clear, commented, and so on. python -m flake8 . python -m mypy fastapi_jwt python -m pylint fastapi_jwt # fails under score 7 python -m isort . --check Try NOT ONLY to achieve 100% coverage, but also to cover extreme cases, height load cases, multithreaded cases, incorrect input, and so on. python -m pytest You can fix some issues in auto mode. Sorting imports and make autopep. shell python -m isort .","title":"Linting and Testing"},{"location":"developing/#publishing","text":"Egg (deprecated) python3 setup.py build python3 setup.py sdist twine upload -r testpypi dist/* twine upload dist/* Build Wheel and see what inside python3 -m pip wheel . --no-deps --wheel-dir dist tar --list -f dist/fastapi-jwt-0.0.1-py3-none-any.whl Load dist to pypi twine upload -r testpypi dist/* twine upload dist/*","title":"Publishing"},{"location":"developing/#docs","text":"","title":"Docs"},{"location":"developing/#editing","text":"Edit it in docs/ mkdocs can be run as dev server with auto-reload. mkdocs serve --config-file docs/mkdocs.yml Note: Server will auto-restart for all changed docs/* files. If you want to edit README.md or CONTRIBUTING.md you should restart server on each change.","title":"Editing"},{"location":"developing/#building-todo","text":"Add python backend docs TODO lazydocs \\ --output-path=\"./docs/references/backend\" \\ --overview-file=\"index.md\" \\ --src-base-url=\"https://github.com/k4black/flowingo/blob/master\" \\ flowingo","title":"Building (TODO)"},{"location":"developing/#deploy","text":"","title":"Deploy"},{"location":"developing/#without-versioning-now","text":"Build and deploy docs itself mkdocs build --config-file docs/mkdocs.yml mkdocs gh-deploy --config-file docs/mkdocs.yml","title":"Without versioning (now)"},{"location":"developing/#with-mike-as-versioning-tool-todo","text":"Deploy with mike to github-pages with versioning support mike deploy --config-file docs/mkdocs.yml 0.0.1 latest --push mike alias --config-file docs/mkdocs.yml 0.0.1 0.0.x --push mike set-default --config-file docs/mkdocs.yml latest --push","title":"With mike as versioning tool (TODO)"},{"location":"developing/#with-read-the-docs-as-versioning-tool-todo","text":"Deploy with mkdocs to read-the-docs for versioning support TODO","title":"With read-the-docs as versioning tool (TODO)"},{"location":"release-notes/","text":"","title":"Release notes"},{"location":"user_guide/","text":"User guide This library made in fastapi style, so it can be used as standard security features Example from datetime import timedelta from fastapi import FastAPI, Security, HTTPException from fastapi_jwt import ( JwtAccessBearerCookie, JwtAuthorizationCredentials, JwtRefreshBearer, ) app = FastAPI() # Read access token from bearer header and cookie (bearer priority) access_security = JwtAccessBearerCookie( secret_key=\"secret_key\", auto_error=False, access_expires_delta=timedelta(hours=1) # change access token validation timedelta ) # Read refresh token from bearer header only refresh_security = JwtRefreshBearer( secret_key=\"secret_key\", auto_error=True # automatically raise HTTPException: HTTP_401_UNAUTHORIZED ) @app.post(\"/auth\") def auth(): # subject (actual payload) is any json-able python dict subject = {\"username\": \"username\", \"role\": \"user\"} # Create new access/refresh tokens pair access_token = access_security.create_access_token(subject=subject) refresh_token = refresh_security.create_refresh_token(subject=subject) return {\"access_token\": access_token, \"refresh_token\": refresh_token} @app.post(\"/refresh\") def refresh( credentials: JwtAuthorizationCredentials = Security(refresh_security) ): # Update access/refresh tokens pair # We can customize expires_delta when creating access_token = access_security.create_access_token(subject=credentials.subject) refresh_token = refresh_security.create_refresh_token(subject=credentials.subject, expires_delta=timedelta(days=2)) return {\"access_token\": access_token, \"refresh_token\": refresh_token} @app.get(\"/users/me\") def read_current_user( credentials: JwtAuthorizationCredentials = Security(access_security) ): # auto_error=False, fo we should check manually if not credentials: raise HTTPException(status_code=401, detail='my-custom-details') # now we can access Credentials object return {\"username\": credentials[\"username\"], \"role\": credentials[\"role\"]}","title":"User Guide"},{"location":"user_guide/#user-guide","text":"This library made in fastapi style, so it can be used as standard security features","title":"User guide"},{"location":"user_guide/#example","text":"from datetime import timedelta from fastapi import FastAPI, Security, HTTPException from fastapi_jwt import ( JwtAccessBearerCookie, JwtAuthorizationCredentials, JwtRefreshBearer, ) app = FastAPI() # Read access token from bearer header and cookie (bearer priority) access_security = JwtAccessBearerCookie( secret_key=\"secret_key\", auto_error=False, access_expires_delta=timedelta(hours=1) # change access token validation timedelta ) # Read refresh token from bearer header only refresh_security = JwtRefreshBearer( secret_key=\"secret_key\", auto_error=True # automatically raise HTTPException: HTTP_401_UNAUTHORIZED ) @app.post(\"/auth\") def auth(): # subject (actual payload) is any json-able python dict subject = {\"username\": \"username\", \"role\": \"user\"} # Create new access/refresh tokens pair access_token = access_security.create_access_token(subject=subject) refresh_token = refresh_security.create_refresh_token(subject=subject) return {\"access_token\": access_token, \"refresh_token\": refresh_token} @app.post(\"/refresh\") def refresh( credentials: JwtAuthorizationCredentials = Security(refresh_security) ): # Update access/refresh tokens pair # We can customize expires_delta when creating access_token = access_security.create_access_token(subject=credentials.subject) refresh_token = refresh_security.create_refresh_token(subject=credentials.subject, expires_delta=timedelta(days=2)) return {\"access_token\": access_token, \"refresh_token\": refresh_token} @app.get(\"/users/me\") def read_current_user( credentials: JwtAuthorizationCredentials = Security(access_security) ): # auto_error=False, fo we should check manually if not credentials: raise HTTPException(status_code=401, detail='my-custom-details') # now we can access Credentials object return {\"username\": credentials[\"username\"], \"role\": credentials[\"role\"]}","title":"Example"}]}